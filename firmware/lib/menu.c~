#include <avr/io.h>
#include <avr/pgmspace.h>
#include <string.h>
#include <stdio.h>
#include <util/delay.h>
#include "../hardware.h"
#include "menu.h"
#include "printerFunctions.h"
#include "lcd.h"

// *****************************************************************************
// Declare variables. **********************************************************
// *****************************************************************************

// Status flags. ***************************************************************
uint8_t adjustMenu = 0;		// Adjustment menu flag. Set if current menu is in adjustment mode.
uint8_t specialScreenFlag = 0;	// Special screen flag. Set if special screen different from menu is shown.
uint8_t menuUpdatedFlag;	// Set if menu was changed by button or rotary encoder.
//uint8_t menuIdleFlag = 1;


// Define menu entry data type as struct. **************************************
typedef struct menuStruct {
	const char *text;
	const char *unit;	// "mm" or something like this.
	uint8_t unitFactor;	// Conversion from internal unit to SI unit.
	uint8_t type;	// 0: Parent menu, 1: Child menu, 2: Action menu, 3: Adjustment menu.
	uint8_t parent;
	uint8_t child;
	uint8_t previous;
	uint8_t next;
  	void (*fp)( uint8_t );	// Menu action function pointer.
} menuEntry;


// Menu strings. ***************************************************************
// NOTE: Maximum string length for adjustment menus is 10 characters.
static const char menuString00[] PROGMEM = "Info screen";
static const char menuString01[] PROGMEM = "Printer functions";
static const char menuString02[] PROGMEM = 	"Back";
static const char menuString03[] PROGMEM = 	"Build platfrom top";
static const char menuString04[] PROGMEM = 	"Platform Home";
static const char menuString05[] PROGMEM = 	"Beamer res 0.05 mm";
static const char menuString06[] PROGMEM = 	"Beamer res 0.10 mm";
static const char menuString07[] PROGMEM = 	"Tilt";
static const char menuString08[] PROGMEM = "Setup";
static const char menuString09[] PROGMEM = 	"Back";
static const char menuString10[] PROGMEM = 	"Tilt";
static const char menuString11[] PROGMEM = 		"Back";
static const char menuString12[] PROGMEM = 		"Tilt";
static const char menuString13[] PROGMEM = 		"Angle";
static const char menuString14[] PROGMEM = 		"Speed";
static const char menuString15[] PROGMEM = 	"Build platform";
static const char menuString16[] PROGMEM = 		"Back";
static const char menuString17[] PROGMEM = 		"Speed";
static const char menuString18[] PROGMEM = 		"Layer";
static const char menuString19[] PROGMEM = 		"Base layer";
static const char menuString20[] PROGMEM = 		"Move";
static const char menuString21[] PROGMEM = 		"Home";
static const char menuString22[] PROGMEM = 		"Top";
static const char menuString23[] PROGMEM = 	"Beamer platform";
static const char menuString24[] PROGMEM = 		"Back";
static const char menuString25[] PROGMEM = 		"Speed";
static const char menuString26[] PROGMEM = 		"Home";
static const char menuString27[] PROGMEM = 		"Move";
static const char menuString28[] PROGMEM = 		"Set 0.05 mm res pos";
static const char menuString29[] PROGMEM = 		"Set 0.10 mm res pos";


// Unit strings. ***************************************************************
static const char unitString00[] PROGMEM = "";
static const char unitString01[] PROGMEM = "";
static const char unitString02[] PROGMEM = 	"";
static const char unitString03[] PROGMEM = 	"";
static const char unitString04[] PROGMEM = 	"";
static const char unitString05[] PROGMEM = 	"";
static const char unitString06[] PROGMEM = 	"";
static const char unitString07[] PROGMEM = 	"";
static const char unitString08[] PROGMEM = "";
static const char unitString09[] PROGMEM = 	"";
static const char unitString10[] PROGMEM = 	"";
static const char unitString11[] PROGMEM = 		"";
static const char unitString12[] PROGMEM = 		"";
static const char unitString13[] PROGMEM = 		"dg";
static const char unitString14[] PROGMEM = 		"dg/s";
static const char unitString15[] PROGMEM = 	"";
static const char unitString16[] PROGMEM = 		"";
static const char unitString17[] PROGMEM = 		"mm/s";
static const char unitString18[] PROGMEM = 		"mm";
static const char unitString19[] PROGMEM = 		"mm";
static const char unitString20[] PROGMEM = 		"mm";
static const char unitString21[] PROGMEM = 		"";
static const char unitString22[] PROGMEM = 		"";
static const char unitString23[] PROGMEM = 	"";
static const char unitString24[] PROGMEM = 		"";
static const char unitString25[] PROGMEM = 		"mm/s";
static const char unitString26[] PROGMEM = 		"";
static const char unitString27[] PROGMEM = 		"mm";
static const char unitString28[] PROGMEM = 		"";
static const char unitString29[] PROGMEM = 		"";


uint16_t menuValues[]=	// Using pointers would make sense here...
{
	0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29
};

// Generic function pointer. ***************************************************
// Load function address from progmem into this pointer and call the function.
// Menu action functions.
typedef void (*functionPointerVoid)(uint8_t);
functionPointerVoid menuFunction;


// Menu function pointers. *****************************************************
// Default function.
void menuFunctionDefault(uint8_t input){};

// Go to info screen.	**************************** 00
void menuFunction00(uint8_t input)
{
	specialScreenFlag = 1;
	specialScreenFunction00();
};
// Platform up.		**************************** 03
void menuFunction03(uint8_t input)	
{
	buildPlatformTop();
};
// Platform home.	**************************** 04
void menuFunction04(uint8_t input)	
{
	buildPlatformHome();	
};
// Beamer high res.	**************************** 05
void menuFunction05(uint8_t input)	
{
	beamerMoveHiResPosition();
};
// Beamer low res.	**************************** 06
void menuFunction06(uint8_t input)	
{
	beamerMoveLoResPosition();
};
// Tilt.		**************************** 07
void menuFunction07(uint8_t input)	
{
	tilt(tiltAngle, tiltSpeed);
};
// Tilt. Same as 07.	**************************** 12
void menuFunction12(uint8_t input)	
{
	tilt(tiltAngle, tiltSpeed);
};
// Adjust tilt angle.	**************************** 13
void menuFunction13(uint8_t input)	
{
	tiltAdjustAngle(input);
};
// Adjust tilt speed.	**************************** 14
void menuFunction14(uint8_t input)	
{
	tiltAdjustSpeed(input);
};
// Adjust build platform speed. ******************** 17
void menuFunction17(input)	
{
	buildPlatformAdjustSpeed(input);
};
// Adjust layer thickness. ************************* 18
void menuFunction18(uint8_t input)	
{
	buildPlatformAdjustLayerHeight(input);
};
// Adjust bottom layer thickness. ****************** 19
void menuFunction19(uint8_t input)	
{
	buildPlatformAdjustBaseLayerHeight(input);
};
// Move (adjust position). ************************* 20
void menuFunction20(uint8_t input)	
{
	buildPlatformAdjustPosition(input);
};
// Home build platform.	**************************** 21
void menuFunction21(uint8_t input)	
{
	buildPlatformHome();	
};
// Top build platform.	**************************** 22
void menuFunction22(uint8_t input)	
{
	buildPlatformTop();
};
// Adjust beamer platform speed. ******************* 25
void menuFunction25(uint8_t input)	
{
	beamerAdjustSpeed(input);
};
// Home beamer platform. *************************** 26
void menuFunction26(uint8_t input)	
{
	beamerHome();
};
// Move (adjust beamer position). ****************** 27
void menuFunction27(uint8_t input)	
{
	beamerAdjustPosition(input);
};
// Set hi res position. ************************ 28
void menuFunction28(uint8_t input)	
{
	beamerSetHiResPosition();
};
// Set low res position. *************************** 29
void menuFunction29(uint8_t input)	
{
	beamerSetLoResPosition();
};


// Define menu entries. ********************************************************
const menuEntry menu[] PROGMEM= {
					{menuString00,	unitString00,	1,	2,	0,	0,	0,	1, 	menuFunction00},	//	0	Info screen		
					{menuString01,	unitString01,	1,	0,	1,	2,	0,	8, 	menuFunctionDefault},	//	1	Printer functions		
					{menuString02,	unitString02,	1,	1,	1,	2,	2,	3, 	menuFunctionDefault},	//	2		Back	
					{menuString03,	unitString03,	1,	2,	1,	3,	2,	4, 	menuFunction03},	//	3		Build platform top	
					{menuString04,	unitString04,	1,	2,	1,	4,	3,	5, 	menuFunction04},	//	4		build platform home	
					{menuString05,	unitString05,	1,	2,	1,	5,	4,	6, 	menuFunction05},	//	5		beamer high res (0.05 mm)	
					{menuString06,	unitString06,	1,	2,	1,	6,	5,	7, 	menuFunction06},	//	6		beamer low res (0.10 mm)	
					{menuString07,	unitString07,	1,	2,	1,	7,	6,	7,	menuFunction07},	//	7		Tilt	
					{menuString08,	unitString08,	1,	0,	8,	9,	1,	8,	menuFunctionDefault},	//	8	Setup		
					{menuString09,	unitString09,	1,	1,	8,	9,	9,	10, 	menuFunctionDefault},	//	9		Back	
					{menuString10,	unitString10,	1,	0,	8,	11,	9,	15,	menuFunctionDefault},	//	10		Tilt	
					{menuString11,	unitString11,	1,	1,	10,	11,	11,	12, 	menuFunctionDefault},	//	11			Back
					{menuString12,	unitString12,	1,	2,	10,	11,	11,	13, 	menuFunction12},	//	12			Tilt
					{menuString13,	unitString13,	1,	3,	10,	12,	12,	14, 	menuFunction13},	//	13			Tilt angle
					{menuString14,	unitString14,	1,	3,	10,	13,	13,	14, 	menuFunction14},	//	14			Tilt speed
					{menuString15,	unitString15,	1,	0,	8,	16,	10,	23, 	menuFunctionDefault},	//	15		Build platform	
					{menuString16,	unitString16,	1,	1,	15,	16,	16,	17, 	menuFunctionDefault},	//	16			Back
					{menuString17,	unitString17,	1,	3,	15,	17,	16,	18, 	menuFunction17},	//	17			Speed
					{menuString18,	unitString18,	1,	3,	15,	18,	17,	19, 	menuFunction18},	//	18			Layer thickness
					{menuString19,	unitString19,	1,	3,	15,	19,	18,	20, 	menuFunction19},	//	19			Bottom layer thickness
					{menuString20,	unitString20,	1,	3,	15,	20,	19,	21, 	menuFunction20},	//	20			Move
					{menuString21,	unitString21,	1,	2,	15,	21,	20,	22, 	menuFunction21},	//	21			Home
					{menuString22,	unitString22,	1,	2,	15,	22,	21,	22, 	menuFunction22},	//	22			Top
					{menuString23,	unitString23,	1,	0,	8,	24,	15,	23, 	menuFunctionDefault},	//	23		Beamer platform	
					{menuString24,	unitString24,	1,	1,	23,	24,	24,	25, 	menuFunctionDefault},	//	24			Back
					{menuString25,	unitString25,	1,	3,	23,	25,	24,	26, 	menuFunction25},	//	25			Speed
					{menuString26,	unitString26,	1,	2,	23,	26,	25,	27, 	menuFunction26},	//	26			Home
					{menuString27,	unitString27,	1,	3,	23,	27,	26,	28, 	menuFunction27},	//	27			Move 0.1 mm
					{menuString28,	unitString28,	1,	2,	23,	28,	27,	29, 	menuFunction28},	//	28			Set normal position
					{menuString29,	unitString29,	1,	2,	23,	29,	28,	29, 	menuFunction29}		//	29			Set low res position
				};


// Menu variables. *************************************************************
uint8_t currentMenuDepth = 0;
#define MENU_DEPTH_MAX 2		// + 1...
uint8_t highlightedLineNew[] = {0,0,0};	// Adjust this to max menu depth.
// uint8_t highlightedLine = 0;		new...
// uint8_t highlightedLineParent = 0;	new...
int8_t currentIndices[] = {-1,-1,-1,-1};

uint8_t menuIndex = 0;
uint8_t menuIndexOld = 0;
uint8_t currentMenuType;
uint8_t currentMenuParent;
uint8_t currentMenuChild;
uint8_t currentMenuPrev;
uint8_t currentMenuNext;

#define VALUE_POS 13	// LCD X position of menu value.
#define UNIT_POS 16	// LCD X position of menu value unit.

uint8_t menuChangedFlag = 0;

uint8_t menuSymbols[] =	{		// 0: Parent menu, 1: Child menu, 2: Action menu, 3: Adjustment menu.
			0,		// Enter child menu: Arrow right self programmed.
			1,		// Leave child menu: Arrow left self programmed.
			4,		// Action menu: Enter self programmed.
//			0b11011011,	// 
//			0b01111110,	// Arrow right from lcd mem.
			3		// Adjustment menu: Plus/Minus self programmed.
			};

// Special screens. ************************************************************

char specialScreenLine0[21];	// Length = 21 because of \0 string terminator.
char specialScreenLine1[21];
char specialScreenLine2[21];
char specialScreenLine3[21];

// Info screen.
void specialScreenFunction00( void )
{
	char buffer[10];
	specialScreenFlag = 1;
	if (printerGetState()==1)
	{
		strcpy(specialScreenLine0, "Printing...");
		strcpy(specialScreenLine1, "Slice ");
			utoa( printerGetSlice(), buffer, 10 );
			strcat(specialScreenLine1, buffer);
			strcat(specialScreenLine1, " of ");
			utoa( printerGetNumberOfSlices(), buffer, 10 );
			strcat(specialScreenLine1, buffer);
		strcpy(specialScreenLine2, "");
		strcpy(specialScreenLine3, "");
	}
	else if (printerGetState()==0)
	{
		strcpy(specialScreenLine0, "Printer idle.");
		strcpy(specialScreenLine1, "");
		strcpy(specialScreenLine2, "Press button to");
		strcpy(specialScreenLine3, "access menu.");

	}	
}

// *****************************************************************************
// Menu control functions. *****************************************************
// *****************************************************************************

// Evaluate inputs and get current menu entries. *******************************
void menuEvaluateInput(uint8_t button, int8_t rotaryEncoder)
{
	// Get current menu info. **************************************
	currentMenuType = pgm_read_byte(&menu[menuIndex].type);
	// Save menu index for later.
	menuIndexOld = menuIndex;
	
	// Unset update flag.
//	menuUpdatedFlag = 0;

	// Check button and act. ***************************************
	if(button==1)
	{
		if(specialScreenFlag)
		{
			specialScreenFlag=0;
		}
		else
		{
			// Do stuff according to menu type.
			switch(currentMenuType)
			{
				case 0:	// Parent menu --> enter child menu.
					currentMenuDepth += 1;
// new					highlightedLineParent = highlightedLine;	// Save highlighted line for parent menu.
					menuIndex = pgm_read_byte(&menu[menuIndex].child);
					menuIndexOld = menuIndex;			// 
// new					highlightedLine = 0;				// Set first line highlighted.
					break;
				case 1: // Child menu --> enter parent menu.
					currentMenuDepth -= 1;
					menuIndex = pgm_read_byte(&menu[menuIndex].parent);
// new					highlightedLine = highlightedLineParent;	// Restore highlightedLine for parent menu.
					menuIndexOld = menuIndex;
					break;
				case 2: // Action menu --> call function
					menuFunction = pgm_read_word(&menu[menuIndex].fp);
					menuFunction(0);
					break;
				case 3:	// Adjustment menu --> enter adjustment mode.
					adjustMenu ^= 1<<0;
					break;
			}
		}
//		menuUpdatedFlag = 1;
		menuChanged();
	}
	
	// Check rotary encoder. ***************************************
	if (rotaryEncoder != 0) // Encoder turned?
	{
		if(!specialScreenFlag)
		{
			if(rotaryEncoder==1) // Right hand turn.
			{
				// Do stuff according to menu type.
				switch(currentMenuType)
				{
					case 0:	// Parent menu --> go to next menu item.
						menuIndex = pgm_read_byte(&menu[menuIndex].next);
						break;
					case 1: // Child menu --> go to next menu item.
						menuIndex = pgm_read_byte(&menu[menuIndex].next);
						break;
					case 2: // Action menu --> go to next menu item.
						menuIndex = pgm_read_byte(&menu[menuIndex].next);
						break;
					case 3:	// Adjustment menu --> adjust value.
						// Call fnc with 1 as parameter to increase value.
						if(adjustMenu)
						{
							menuFunction = pgm_read_word(&menu[menuIndex].fp);
							menuFunction(1);
						}
						else
						{
							menuIndexOld = menuIndex;
							menuIndex = pgm_read_byte(&menu[menuIndex].next);
						}
						break;
				}
			}
			else
			{
				// Do stuff according to menu type.
				switch(currentMenuType)
				{
					case 0:	// Parent menu --> go to next menu item.
						menuIndexOld = menuIndex;
						menuIndex = pgm_read_byte(&menu[menuIndex].previous);
						break;
					case 1: // Child menu --> go to next menu item.
						menuIndexOld = menuIndex;
						menuIndex = pgm_read_byte(&menu[menuIndex].previous);
						break;
					case 2: // Action menu --> go to next menu item.
						menuIndexOld = menuIndex;
						menuIndex = pgm_read_byte(&menu[menuIndex].previous);
						break;
					case 3:	// Adjustment menu --> adjust value.
						// Call fnc with 2 as parameter to decrease value.
						if(adjustMenu)
						{
							menuFunction = pgm_read_word(&menu[menuIndex].fp);
							menuFunction(2);
						}
						else
						{
							menuIndexOld = menuIndex;
							menuIndex = pgm_read_byte(&menu[menuIndex].previous);
						}
						break;
				}
			}
		}
//		menuUpdatedFlag = 1;
		menuChanged();
	}
	
//	return menuUpdatedFlag;	
}
	
	
// Update and write menu strings. **********************************************
void menuDraw(void)
{
	if(menuChangedFlag)
	{
	
	// Write special screens.
	if(specialScreenFlag)
	{
		specialScreenFunction00(); // Update lines.
		lcd_clrscr();
		lcd_gotoxy(0,0);
		lcd_puts(specialScreenLine0);
		lcd_gotoxy(0,1);
		lcd_puts(specialScreenLine1);
		lcd_gotoxy(0,2);
		lcd_puts(specialScreenLine2);
		lcd_gotoxy(0,3);
		lcd_puts(specialScreenLine3);
	}
	else
	{	
		// Current info: highlighted line, old menu index and current (changed) menu index.
		
		// Decide to increase or decrease highlighted line.
		// Increase highlighted line index if next of current menu index is the old menu index. Only if index changed.
		if (menuIndexOld == pgm_read_byte(&menu[menuIndex].previous) && !(menuIndexOld == menuIndex) )
		{
			// Increase, stop at 3.
// new			if(highlightedLine++ == 3) highlightedLine = 3;
			if(highlightedLineNew[currentMenuDepth]++ == 3) highlightedLineNew[currentMenuDepth] = 3;
		}
		// Decrease highlighted line index if previous of current menu index is the old menu index. Only if index changed.
		else if (menuIndexOld == pgm_read_byte(&menu[menuIndex].next) && !(menuIndexOld == menuIndex))
		{
			// Decrease, stop at 0.
// new			if(highlightedLine-- == 0) highlightedLine = 0;
			if(highlightedLineNew[currentMenuDepth]-- == 0) highlightedLineNew[currentMenuDepth] = 0;
		}
		// Stay same if old menu index is current menu index. This happens at end of menu branches to avoid menu wrapping.
		else if (menuIndexOld == menuIndex);
		{
			// Do nothing...
		}
		
		// Now that we know the highlighted line, we can fetch the menu indices to display.
		// Clear current entries.
		uint8_t i = 0;
		for( i=0; i<4; i++)
		{
			currentIndices[i] = -1;
		}
		// Get current entry to highlighted line.
// new		currentIndices[highlightedLine] = menuIndex;
		currentIndices[highlightedLineNew[currentMenuDepth]] = menuIndex;
		uint8_t j = 0;
		// Get previous entries.
// new		for (j=0; j<highlightedLine; j++)
		for (j=0; j<highlightedLineNew[currentMenuDepth]; j++)
		{
// new			currentIndices[highlightedLine - (j+1)] = pgm_read_byte(&menu[ currentIndices[highlightedLine - (j)] ].previous);
			currentIndices[highlightedLineNew[currentMenuDepth] - (j+1)] = pgm_read_byte(&menu[ currentIndices[highlightedLineNew[currentMenuDepth] - (j)] ].previous);
		}
// new		uint8_t k = highlightedLine+1;
		uint8_t k = highlightedLineNew[currentMenuDepth]+1;
		// Get next entries.
// new		for (k=highlightedLine+1; k<4; k++)
		for (k=highlightedLineNew[currentMenuDepth]+1; k<4; k++)
		{
			currentIndices[k] = pgm_read_byte(&menu[ currentIndices[k-1] ].next);
			// Reset if same as before (end of menu before end of display).
			if (currentIndices[k] == currentIndices[k-1]) currentIndices[k] = -1;
		}
		
		// Write menu strings and adjustment values. *******************
		
		// Write current line marker. *******************
		lcd_clrscr();
//		lcd_gotoxy(0,highlightedLine);
		lcd_gotoxy(0,highlightedLineNew[currentMenuDepth]);
		lcd_putc(menuSymbols[pgm_read_byte(&menu[menuIndex].type)]);

		// Write line 1. ****************************
		lcd_gotoxy(2,0);
		if (currentIndices[0] != -1)
		{
			// Display the menu string.
			lcd_puts_p((char*) pgm_read_word(&menu[currentIndices[0]].text));
			// Display value if adjustment menu.
			if (pgm_read_byte(&menu[currentIndices[0]].type) == 3)
			{
				lcd_gotoxy(VALUE_POS,0);
				//lcd_puts(menuValueStrings[currentIndices[0]]);
				lcd_putu( menuValues[currentIndices[0]]);// * menu[currentIndices[0]].unitFactor);
				// Get length of unit to right align unit. TODO
				lcd_gotoxy(UNIT_POS,0);//lcd_gotoxy(strlen(pgm_read_word(&menu[currentIndices[0]].unit)),0);
				// Display unit.
				lcd_puts_p((char*) pgm_read_word(&menu[currentIndices[0]].unit));
			}
		}
		
		// Write line 2. ****************************
		lcd_gotoxy(2,1);
		if (currentIndices[1] != -1)
		{
			// Display the menu string.
			lcd_puts_p((char*) pgm_read_word(&menu[currentIndices[1]].text));
			// Display value if adjustment menu.
			if (pgm_read_byte(&menu[currentIndices[1]].type) == 3)
			{
				lcd_gotoxy(VALUE_POS,1);
				//lcd_puts(menuValueStrings[currentIndices[1]]);
				lcd_putu(menuValues[currentIndices[1]]);// * menu[currentIndices[1]].unitFactor);
				// Get length of unit to right align unit. TODO
				lcd_gotoxy(UNIT_POS,1);//lcd_gotoxy(strlen(pgm_read_word(&menu[currentIndices[1]].unit)),1);
				// Display unit.
				lcd_puts_p((char*) pgm_read_word(&menu[currentIndices[1]].unit));
			}
		}
		
		// Write line 3. ****************************
		lcd_gotoxy(2,2);
		if (currentIndices[2] != -1)
		{
			// Display the menu string.
			lcd_puts_p((char*) pgm_read_word(&menu[currentIndices[2]].text));
			// Display value if adjustment menu.
			if (pgm_read_byte(&menu[currentIndices[2]].type) == 3)
			{
				lcd_gotoxy(VALUE_POS,2);
				//lcd_puts(menuValueStrings[currentIndices[2]]);
				lcd_putu(menuValues[currentIndices[2]]);// * menu[currentIndices[2]].unitFactor);
				// Get length of unit to right align unit. TODO
				lcd_gotoxy(UNIT_POS,2);//lcd_gotoxy(strlen(pgm_read_word(&menu[currentIndices[2]].unit)),2);
				// Display unit.
				lcd_puts_p((char*) pgm_read_word(&menu[currentIndices[2]].unit));
			}
		}
		
		// Write line 4. ****************************
		lcd_gotoxy(2,3);
		if (currentIndices[3] != -1)
		{
			// Display the menu string.
			lcd_puts_p((char*) pgm_read_word(&menu[currentIndices[3]].text));
			// Display value if adjustment menu.
			if (pgm_read_byte(&menu[currentIndices[3]].type) == 3)
			{
				lcd_gotoxy(VALUE_POS,3);
				//lcd_puts(menuValueStrings[currentIndices[3]]);
				lcd_putu(menuValues[currentIndices[3]]);// * menu[currentIndices[3]].unitFactor);
				// Get length of unit to right align unit. TODO
				lcd_gotoxy(UNIT_POS,3);//strlen(pgm_read_word(&menu[currentIndices[3]].unit)),3);
				// Display unit.
				lcd_puts_p((char*) pgm_read_word(&menu[currentIndices[3]].unit));
			}
		}
		
		// Write menu debug info. *******************
//		lcd_gotoxy(0,3);
//		lcd_putu(numberOfSlices);
//		lcd_putu(beamerTargetPosition);
//		lcd_putu(strlen((char*) pgm_read_word(&menu[currentIndices[0]].unit)));
//		lcd_puti(beamerTimerTargetCompareValue);
//		lcd_putu(beamerHomingFlag);
//		lcd_puts(testBuffer);
	}
	
	menuChangedFlag = 0;
	} // if (menuChangedFlag)
}






// *****************************************************************************
// Set menu values. ************************************************************
// *****************************************************************************

// Set one value. **************************************************************
void menuValueSet (uint16_t input, uint8_t index)
{
	menuValues[index] = input;
//	menuUpdatedFlag = 1;
	menuChanged();
}
// !!! Using pointers would make sense here...


// *****************************************************************************
// Set redraw flag. ************************************************************
// *****************************************************************************
void menuChanged (void)
{
	menuChangedFlag = 1;
}


// *****************************************************************************
// Get menu idle flag. *********************************************************
// *****************************************************************************
/*uint8_t getMenuIdleStatus(void)
{
	return menuIdleFlag;
}
*/

// Jump to info screen.
void menuGoInfoScreen(void)
{
	specialScreenFlag = 1;
	specialScreenFunction00();
	menuChanged();
}


// *****************************************************************************
// String conversion functions. ************************************************
// *****************************************************************************

// Output signed int to LCD. ************************
void lcd_puti( int number )
{
  char buffer[10];

  itoa( number, buffer, 10 );
  lcd_puts( buffer );
}

// Output unsigned int to LCD. **********************
void lcd_putu( unsigned int number )
{
  char buffer[10];

  utoa( number, buffer, 10 );
  lcd_puts( buffer );
}
